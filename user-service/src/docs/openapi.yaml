openapi: 3.0.3
info:
  title: User Service API
  version: "1.0.0"
servers:
  - url: http://localhost:5001/api

tags:
  - name: Users
  - name: Auth

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string, format: email }
        name: { type: string }
        role: { type: string, enum: [user, admin] }
        status: { type: string, enum: [active, inactive] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        lastLoginAt: { type: string, format: date-time, nullable: true }
    UserCreate:
      type: object
      required: [email, password, name]
      properties:
        email: { type: string, format: email }
        password: { type: string }
        name: { type: string }
        role: { type: string, enum: [user, admin] }
    UserUpdate:
      type: object
      properties:
        name: { type: string }
        role: { type: string, enum: [user, admin] }
        status: { type: string, enum: [active, inactive] }
    UserLogin:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }
    LoginResponse:
      type: object
      properties:
        token: { type: string }
        user: { $ref: '#/components/schemas/User' }
    PagedUsers:
      type: object
      properties:
        page: { type: integer }
        limit: { type: integer }
        total: { type: integer }
        items:
          type: array
          items: { $ref: '#/components/schemas/User' }
    Error:
      type: object
      properties:
        message: { type: string }

paths:
  /users:
    post:
      tags: [Users]
      summary: Registracija novega uporabnika
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserCreate' }
      responses:
        '201': { description: Ustvarjen, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '400': { description: Napaka podatkov }
        '409': { description: Email že obstaja }
    get:
      tags: [Users]
      summary: Pridobi seznam vseh uporabnikov
      parameters:
        - in: query
          name: email
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string, enum: [active, inactive] }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedUsers' } } } }

  /users/login:
    post:
      tags: [Auth]
      summary: Prijava (JWT)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserLogin' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/LoginResponse' } } } }
        '401': { description: Napačni podatki }

  /users/{id}:
    get:
      tags: [Users]
      summary: Pridobi podatke o uporabniku
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '400': { description: Neveljaven id }
        '404': { description: Ni najden }
    put:
      tags: [Users]
      summary: Posodobi uporabnika
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserUpdate' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '404': { description: Ni najden }
    delete:
      tags: [Users]
      summary: Izbriši uporabnika
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Izbrisano }
        '404': { description: Ni najden }

  /users/{id}/password:
    put:
      tags: [Users]
      summary: Spremeni geslo
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [newPassword]
              properties:
                currentPassword: { type: string }
                newPassword: { type: string }
      responses:
        '200': { description: Posodobljeno }
        '401': { description: Napaka avtentikacije }
        '404': { description: Ni najden }

  /users/inactive:
    delete:
      tags: [Users]
      summary: Izbriši vse neaktivne uporabnike
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted: { type: integer }

  /users/{id}/exists:
    get:
      tags: [Users]
      summary: Preveri, ali uporabnik obstaja
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  exists: { type: boolean }
        '400': { description: Neveljaven id }

  /users/lookup:
    get:
      tags: [Users]
      summary: Najdi uporabnika po emailu
      parameters:
        - in: query
          name: email
          required: true
          schema: { type: string, format: email }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '404': { description: Ni najden }

  /me:
    get:
      tags: [Users]
      summary: Trenutni uporabnik iz JWT
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '401': { description: Unauthorized }

  /auth/verify:
    get:
      tags: [Auth]
      summary: Validiraj JWT in vrni claim-e
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid: { type: boolean }
                  sub: { type: string }
                  email: { type: string }
                  role: { type: string }
                  iat: { type: integer }
                  exp: { type: integer }
        '401': { description: Invalid token }
